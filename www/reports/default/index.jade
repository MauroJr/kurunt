// kurunt dependencies. 
script(src='/javascripts/reports.js')
link(rel='stylesheet', href='/stylesheets/reports.css')

// this reports dependencies. 
link(rel='stylesheet', href='/default/stylesheets/style.css')
script(src="/default/javascripts/smoothie.js")
script(src="/default/javascripts/default.js")

script(src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js")

// heartbeat (smoothie) chart. 
script(src="/socket.io/socket.io.js")

// d3/rickshaw chart (i dont think d3.layout.min.js is required). 
// script(src="/default/javascripts/d3.v2.min.js") 
// script(src="/default/javascripts/d3.layout.min.js") 


style
	.wrap { padding: 0 2.5em 0 2.5em; margin: 0 auto; width: 1000px; }

div#report

	- var option_query_max_matches = config['sphinx_query_max_matches'];
	
	div.container
	
		h2= title

		h3 
			span#time_segment Now  
			span.attr_text for 
			span.attr_value 
			|  within 
			span#table_title 
		
		
		div.notice(style="margin-bottom: 1em; display: none;") 
			p hum
		
		// select chart and data 
		div.boundry_choice

			form(method="get", name="queryfm", id="queryfm")
				- var table = '';
				- var tableSelected = '';
				- var report = lg.reports[report]['config']['name'];
				
				p.select_table
					label(for="data_table") Table (data): 
					select(name="data_table", id="data_table", onchange="request_data(this.options[selectedIndex].text, '', '', '', '', '', '')")
						- for ( var i in g.indexes ) {
							- if ( g.indexes[i]['status'] != 'deleted' ) {
								- if ( table == '' ) {
									- tableSelected = g.indexes[i]['name'];
								- }
								//- console.log('the index:' + g.indexes[i]['name']);
								- table = g.indexes[i]['name'];

						option() #{table}
							- }
						- }
				
				input.submit3(type="button", value="Now") 				
				// input.submit3(type="button", value="Last 10 Minutes") 
				// input.submit4(type="submit", value="Last Hour") 
				// input.submit4(type="submit", value="Today") 
			

		
			
		// events occured
		div.boundry_events
			p
				span#events
					| n/a 
				| events for 
				span.attr_text 
				span.attr_value 
		

	
		// pulse chart 
		canvas#heartbeat(width="950", height="73")
		script(type='text/javascript')

			var socket = io.connect();
			var smoothie = new SmoothieChart({
				grid: { strokeStyle: 'rgb(214, 215, 218)', fillStyle: 'rgb(37, 40, 41)', lineWidth: .2, millisPerLine: 1000, verticalSections: 3 },
				labels: { fillStyle:'rgb(255, 255, 0)' }
			});
			// Data
			var line1 = new TimeSeries();
			smoothie.streamTo(document.getElementById("heartbeat"), 1000);
			smoothie.addTimeSeries(line1, { strokeStyle: 'rgb(0, 255, 0)', fillStyle: 'rgba(0, 255, 0, 0.3)', lineWidth: 2 });
			
			line1.append(new Date().getTime(), 0);
	
			// Add to SmoothieChart
			smoothie.addTimeSeries(line1);

	
	
		br
		br
		
		// table 
		div#table
			#matrix
				table
					thead.tbhead
						tr

					tbody

		br
		p#response(style="display:none") response 
		p#status(style="display:none") Waiting for input 
		p#message(style="display:none") 

		
		script(type='text/javascript')
			var socket = io.connect();
			var apikey = Math.floor((Math.random()*10000)+1);
			var socket;
			
			socket.on('identify', function (incoming) {
				socket.emit('check_in', { api_key: apikey, report: '#{report}', fresh: true, table: '#{tableSelected}', attribute: '', value: '' });
			});
			socket.on('response', function (data) {
				response_msg("response just for you here: " + data.api_key + " data: " + data.table + " count: " + data.count + " total: " + data.total); 
				
				if ( data.value != '' ) {
					$('.attr_text').text( ' attribute ' );
					$('.attr_value').text( data.attribute + ' value ' + data.real_value );
				} else {
					$('.attr_text').text( ' all attributes ' );
					$('.attr_value').text('');
				}
				
				
				if ( data.chart == 'pulse' ) {
					line1.append(new Date().getTime(), data.count);
					update_events_number(data.total);
					//$('#events').text( data.total + ' ');									// update events number. 
					$('#table_title').text( data.table );
					$(".container").removeClass("updating");
				}
				
				if ( data.chart == 'table' ) {
					//console.log(data.chart);
					//update_events_number(data.total);
					update_table(data);
				}
				
			});
			// general statuses
			socket.on('connect', function(){ status_update("Connected to Server - Refresh your Browser to get working again."); });
			socket.on('disconnect', function(){ $(".notice").show(); status_update("Disconnected from Server."); });
			socket.on('reconnect', function(){ status_update("Reconnected to Server."); });
			socket.on('reconnecting', function( nextRetry ){ status_update("Disconnected from Server - Trying to reconnect - " + nextRetry + " seconds."); });
			//socket.disconnect();		// to disconnect.

			function status_update(txt){
				document.getElementById('status').innerHTML = txt;
				$('.notice').text( txt );
			}
			
			function response_msg(txt){
				document.getElementById('response').innerHTML = txt;
			}
			
			function request_data(table, attribute, value, real_value, timesegment, chart, ran) {
				$(".container").addClass("updating");
				socket.emit('request', { api_key: apikey, report: 'default', fresh: true, table: table, chart: chart, attribute: attribute, value: value, real_value: real_value, timesegment: timesegment, ran: ran });  
			}

			var num_from = 0;
			function update_events_number(num_to) {
				if ( num_to == num_from || num_from === 0 ) { 
					$('#events').text( int_commas(num_to) + ' ');
					num_from = num_to;
					return;
				}
				var tick = (num_to - num_from) / 10;
				var moving_total = num_from;
				moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' ');
				setTimeout(function() { moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' '); }, 100);
				setTimeout(function() { moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' '); }, 200);
				setTimeout(function() { moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' '); }, 300);
				setTimeout(function() { moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' '); }, 400);
				setTimeout(function() { moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' '); }, 500);
				setTimeout(function() { moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' '); }, 600);
				setTimeout(function() { moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' '); }, 700);
				setTimeout(function() { moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' '); }, 800);
				setTimeout(function() { moving_total = Math.round(moving_total + tick); $('#events').text( int_commas(moving_total) + ' '); }, 900);
				num_from = num_to;
			}

			function int_commas(x) {
				// note with jade must escape regex eg: /\B become /\\B etc. 
				return format_num = x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ",");
			}
			
			function strdecode(data) {
				return JSON.parse( decodeURIComponent( escape ( data ) ) );
			}
			
			var table_set = false;
			var what_table = '';
			var prev_data = null;
			function update_table(data) {
				var matrix = strdecode(data.matrix);
				//console.log(matrix);
				//$('#table_data').text(matrix.table[0].text.real_value);
				
				// make table
				
				console.log('what_table: ' + what_table + ' data.table: ' + data.table);
				// if table changed then...
				if ( data.table != what_table ) {
					table_set = false;
					prev_data = null;
					console.log('fresh table!!!!');
				}
				
				var countcols = 0;
				if ( table_set === false && prev_data === null ) {
					$('#table thead tr').html('');
					var thead_th = '<th class="row_num_th"> - </th>';
					$('#table thead tr').append(thead_th);
					for (var key in matrix['table'][0]) {
						if ( key == 'weight' ) { continue; }
						$('#table thead tr').append('<th><a onclick="request_data(' + "'" + data.table + "'" + ',' + "'" + key + "'" + ',' + "''" + ',' + "''" + ',' + "'" + data.timesegment + "'," + "'table'" + ', ' + Math.floor((Math.random()*10000)+1) + ')" href=\"#table=' + data.table + '&attribute=' + key + '\">' + key + '</a></th>');
						countcols++;
					}
					if ( countcols > 0 ) {
						table_set = true;
						what_table = data.table;
					}
				}
				
				$('#table tbody').html('');
				var tbody = '';
				var r = 0;
				for (r = 0; r < 10; r++) {
					
					//if ( matrix.table[r].weight == 'weight' ) { continue; }
					
					var alternate = '';
					if (r%2 != 0) {
						alternate = 'alternate';
					}		
					
					tbody += '<tr><td class="row_num">' + (r + 1) + '</td>';

					var c = 0;
					for (var key in matrix.table[r]) {
						if ( key == 'weight' ) { continue; }
						//console.log('key: ' + key);
						if ( key == '@groupby' || key == '@count' ) { 
							tbody += '<td class="' + alternate + '">' + matrix.table[r][key].real_value + '</td>';
							continue; 
						}
						var request_data = '';
						tbody += '<td class="' + alternate + '"><a onclick="request_data(' + "'" + data.table + "'" + ',' + "'" + key + "'" + ',' + "'" + matrix.table[r][key].value + "'" + ',' + "'" + matrix.table[r][key].real_value + "'" + ',' + "'" + data.timesegment + "',"  + "'table'" + ', ' + Math.floor((Math.random()*10000)+1) + ')" href=\"#table=' + data.table + '&attribute=' + key + '&value=' + matrix.table[r][key].value + '&real_value=' + matrix.table[r][key].real_value +'\">' + matrix.table[r][key].real_value + '</a></td>';
						c++;
					}

					tbody += '</tr>';
				}
				//console.log(tbody);
				$('#table tbody').append(tbody);
				prev_data = data;
			}
			
